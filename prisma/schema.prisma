// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "mongodb"
  url      = env("DATABASE_URL")
}

model User {
  id                String            @id @default(auto()) @map("_id") @db.ObjectId
  email             String            @unique
  firstName         String
  lastName          String
  password          String?
  avatarUrl         String
  clerkId           String            @unique
  isAdmin           Boolean           @default(false)
  isCommunityMember Boolean           @default(false)
  createdAt         DateTime          @default(now())
  updatedAt         DateTime          @updatedAt
  posts             Post[]
  comments          Comment[]
  Likes             Like[]
  Introduction      Introduction?
  announcements     Announcement[]    @relation("Announcements")
  bookmarks         Bookmark[]
  // Explicit reference since mongodb does not suppoer implicit many-to-many relations  so we need to create a join table(ChatSpaceMember)
  //  to represent the many-to-many relationship between ChatSpace and User
  chatSpaces        ChatSpaceMember[]
  messages          Message[]
}

model Post {
  id        String     @id @default(auto()) @map("_id") @db.ObjectId
  title     String
  content   String
  Image     String?
  video     String?
  gif       String?
  file      String?
  createdAt DateTime   @default(now())
  updatedAt DateTime   @updatedAt
  author    User       @relation(fields: [authorId], references: [id])
  authorId  String     @db.ObjectId
  comments  Comment[]
  likes     Like[]
  bookmarks Bookmark[]
}

model Comment {
  id        String     @id @default(auto()) @map("_id") @db.ObjectId
  text      String
  Image     String?
  video     String?
  gif       String?
  file      String?
  createdAt DateTime   @default(now())
  updatedAt DateTime   @updatedAt
  author    User       @relation(fields: [authorId], references: [id])
  authorId  String     @db.ObjectId
  post      Post       @relation(fields: [postId], references: [id])
  postId    String     @db.ObjectId
  bookmarks Bookmark[]
}

model Like {
  id        String   @id @default(auto()) @map("_id") @db.ObjectId
  createdAt DateTime @default(now())
  user      User     @relation(fields: [userId], references: [id])
  userId    String   @db.ObjectId
  post      Post     @relation(fields: [postId], references: [id])
  postId    String   @db.ObjectId
}

model Introduction {
  id        String   @id @default(auto()) @map("_id") @db.ObjectId
  title     String
  content   String
  Image     String?
  video     String?
  gif       String?
  file      String?
  author    User     @relation(fields: [authorId], references: [id])
  authorId  String   @unique @db.ObjectId
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
}

model Announcement {
  id        String   @id @default(auto()) @map("_id") @db.ObjectId
  title     String
  content   String
  author    User     @relation("Announcements", fields: [authorId], references: [id])
  authorId  String   @db.ObjectId
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
}

model Bookmark {
  id        String       @id @default(auto()) @map("_id") @db.ObjectId
  type      BookmarkType
  user      User         @relation(fields: [userId], references: [id])
  userId    String       @db.ObjectId
  post      Post?        @relation(fields: [postId], references: [id])
  postId    String?      @db.ObjectId
  comment   Comment?     @relation(fields: [commentId], references: [id])
  commentId String?      @db.ObjectId
}

// serves as a bridge connecting User and ChatSpace
model ChatSpaceMember {
  id          String    @id @default(auto()) @map("_id") @db.ObjectId
  chatSpace   ChatSpace @relation(fields: [chatSpaceId], references: [id])
  chatSpaceId String    @db.ObjectId
  user        User      @relation(fields: [userId], references: [id])
  userId      String    @db.ObjectId
}

model ChatSpace {
  id        String            @id @default(auto()) @map("_id") @db.ObjectId
  title     String
  members   ChatSpaceMember[]
  messages  Message[]
  createdAt DateTime          @default(now())
  updatedAt DateTime          @updatedAt
}

model Message {
  id          String    @id @default(auto()) @map("_id") @db.ObjectId
  text        String
  Image       String?
  video       String?
  gif         String?
  file        String?
  createdAt   DateTime  @default(now())
  updatedAt   DateTime  @updatedAt
  author      User      @relation(fields: [authorId], references: [id])
  authorId    String    @db.ObjectId
  chatSpace   ChatSpace @relation(fields: [chatSpaceId], references: [id])
  chatSpaceId String    @db.ObjectId
}

model Contact {
  id        String   @id @default(auto()) @map("_id") @db.ObjectId
  name      String
  email     String
  subject   String
  message   String
  createdAt DateTime @default(now())
}

enum BookmarkType {
  POST
  COMMENT
}
